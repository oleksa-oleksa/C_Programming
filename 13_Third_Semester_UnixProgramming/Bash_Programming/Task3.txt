Aufgabe 1a:

#!/bin/bash
echo $#

======================

Aufgabe 1b:


#!/bin/bash
echo $8
echo $9

======================

Aufgabe 2:

#!/bin/bash
let n=$#
let i=1

if [ $((n%2)) -eq 0 ]
then
 while [ $i -lt $n ];
  do
    j=$((i+1))
    echo "${!i} = ${!j}"
    let i+=2
  done
# If error
else
 echo "Err: Odd amount of parameters" >&2 
 exit 1
fi

===========================

Aufgabe 3:

#!/bin/bash
let n=$#
if [ $n -ne 2 ]
then
 echo "Err: Incorrect parameter call" >&2
 exit 1
fi

for file in *;
 do
  let len=$(echo -n $file | wc -m)
  if [ $len -ge $1 ]; then
   if [ $len -lt $2 ]
    then
     echo $file
    fi
  fi
 done

==============================

Aufgabe 4

#!/bin/bash
mkdir backup 2>/dev/null

for file in $(ls *$1);
 do
   echo -n "Do you want to backup " + $file + "? y/n: "
  read userInput
  if [ $userInput == 'y' ]
   then
     cp -i $file backup/$file
     echo $file + " done."
    else
     echo $file + "... backup skipped"
   fi
 done

===========================

Aufgabe 5

#!/bin/bash


while [ true ]; do

echo -n $1, $2, $3 ": "
read answer

if [ $answer == $2 ]
 then
  exit 0
fi

if [ $answer == $3 ]
 then
  exit 1

fi
done

              
====================

Aufgabe 6

#!/bin/bash

for file in $(ls $1*);
 do
 mv "$file" $2${file#$1}
 done

===========================

Aufgabe 7      

#!/bin/bash

#Counting md5sum, saving to var, searching and comparing, print

filename=$1
database=$2
LINES=$(cat $filename)
for line in $LINES; do
    passwordMD=$(echo -n $line | md5sum | cut -d '-' -f 1)
    num=$(grep $passwordMD $database | wc -w)
    echo $num, \"$line\", $passwordMD >> passwords.txt
done          
sort -g -r passwords.txt
 
rm passwords.txt


==============================

Aufgabe 8

#!/bin/bash
ps ax | wc -l

==============================

Aufgabe 9

#!/bin/bash


for line in $(cat /etc/passwd | cut -d ":" -f 1); do
        length=`echo $line | wc -m`
        echo $length $line >> users.txt
done

for name in $(cat ./users.txt | sort -n | cut -d ' ' -f 2); do
echo $name
done

rm users.txt


==============================

Aufgabe 10

#/!bin/bash
find $1 -type f ! -executable

=============================

Aufgabe 11
          
#!/bin/bash
cat /proc/cpuinfo | grep "model name"
cat /proc/cpuinfo | grep "cpu MHz"

echo ""

FIRST=$(free -h | head -n 1)
echo $FIRST | cut -d " " -f 1

LAST=$(free -h | head -n 2 | tail -n 1)
echo $LAST | cut -d " " -f 2

echo ""

FIRST=$(free -h | head -n 1)
echo $FIRST | cut -d " " -f 3

LAST=$(free -h | head -n 2 | tail -n 1)
echo $LAST | cut -d " " -f 4

echo ""
df -h | head -n 4 | tail -n 1

echo ""
echo -n "Active Processes:"
ps ax | wc -l

echo ""
echo -n "Operation system:"
uname -a | cut -d " " -f 1
echo -n "Kernel version: "
uname -r

=============================

Augabe 12

#!/bin/bash
decimal=$1
binary=""
while [ $decimal -ne 0 ]; do
binary=$(( $decimal % 2))$binary
decimal=$[decimal / 2]
done
echo $1 " = " $binary

==============================

Augbabe 13

#!/bin/bash
# MULT ADD SUB DIV MOD EXP

operator=$2

case $operator in
                MULT) echo $[$1*$3];;
                ADD) echo $[$1+$3];;
                SUB) echo $[$1-$3];;
                DIV) echo $[$1/$3];;
                MOD) echo $[$1%$3];;
                EXP) echo $[$1**$3];;
                *) echo -n "Operator?.."
esac
  
